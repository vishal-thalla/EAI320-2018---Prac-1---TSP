"""
Created on Fri Feb  9 17:39:03 2018

@author: Vishal
Final Code for the Practical including Task 1 and Task 2
"""
import googlemaps
import itertools
from queue import Queue

gmaps = googlemaps.Client(key = 'AIzaSyB8Sjq1wYpnC2mKqyheCNeeTIpZKNVKovI')

class Node(object): #needed for new style class
    #class will only hold a value which will be title and children nodes
    def __init__(self, value):
        self.value = value
        self.children = []
        self.distances = [] # will be parallel to children list
        
    def find(self, value):
        i = 0
        while (i != len(self.children) and self.children[i].value != value):
            i += 1
        return i
      
    #don't clutter the tree unnecessarily since there is no delete method    
    def addChild(self, child):
        if (self.find(child.value) == len(self.children)): # not found
            self.children.append(child)
class Edge(object):
    def __init__(self, p1, p2, dist):
        self.p1= p1
        self.p2= p2
        
    def isDuplicate(self, other):
        if (other.p1 == self.p1 or other.p2 == self.p1) and (other.p2 == self.p1 or other.p2 == self.p2):
            return True
        return False
    
class Tree(object): #will be structured like a graph
    def __init__(self):
        self.nodes = []
        self.edges = []
        self.root = None
    
    #checks if the given value node already exists in tree
    def isDuplicate(self, value):
        i = 0
        while (i < len(self.nodes) and self.nodes[i].value != value):
            i += 1
        if (i == len(self.nodes)):
            return False
        else:
            return True
    
    def insert(self, value):
        #create a new root(Starting location) if needed
        if (self.root == None):
            self.root = Node(value)
            self.nodes.append(self.root)
            return
        
        # if not root then each node in graph needs a link to newly added node
        # new node also needs a link to each existing node
        # new node then needs to be added to the existing nodes list
        # don't clutter graph with duplicates
        if (not self.isDuplicate(value)):
            temp = Node(value)
            for i in range(len(self.nodes)):
                self.nodes[i].addChild(temp)
                temp.addChild(self.nodes[i])
            self.nodes.append(temp)
    
    def updateDistances(self):
        for i in range(0, len(self.nodes)):
            for j in range(0, len(self.nodes)):
                if (i == j):
                    continue
                dist_dict = gmaps.distance_matrix(self.nodes[i].value, self.nodes[j].value)
                self.nodes[i].distances.insert(self.nodes[i].find(self.nodes[j].value), dist_dict["rows"][0]["elements"][0]["distance"]["value"])
    """
    TSP problem Solution
    prints out the shortest path from root back to itself
    prints out the shortest distance of the travelling salesman problem
    uses brute force
    """
    def TSPDistShortest(self):
        rest = []
        best_path = []
        for i in range(1, len(self.nodes)):
            rest.append(self.nodes[i])
        rest.append(self.root)#root will be the starting point and the final destination
        paths = [i for i in list(itertools.permutations(rest)) if i[len(i)-1].value == self.root.value]        
        #^ store all possible paths that use root as the last location
        shortest = 0
        for j in range(len(paths[0])-1):
            shortest += paths[0][j].distances[paths[0][j].find(paths[0][j+1].value)]
        best_path = paths[0]
        """
        ^ set the first best_path and first shortest distance and then compare 
        against it and correct them both till the actual shortest distance
        and path have been found
        """
        for i in range(1, len(paths)):
            curr = 0
            for j in range(len(paths[0])-1):
                curr += paths[i][j].distances[paths[i][j].find(paths[i][j+1].value)]
            if (curr < shortest):
                best_path = paths[i]
                shortest = curr
        #starts from root
        print(self.root.value + ' ->')
        #goes through all locations on best path
        for i in range(len(best_path)-1):
            print(best_path[i].value + ' ->')
        print(best_path[len(best_path)-1].value)
        # adds the root to next in best_path distance
        shortest += self.root.distances[self.root.find(best_path[0].value)]
        print("Shortest Path Distance = " + str(shortest) + " m")
    
    def find(self, value):
        i = 0
        while (i != len(self.nodes) and self.nodes[i].value != value):
            i += 1
        if (i == len(self.nodes)):
            return None
        return self.nodes[i]
    
    def printChildren(self, value):
        print(value + '\n')
        temp = self.find(value)
        for i in range (0, len(temp.children)):
            print(temp.children[i].value)
            if (temp.distances):
                print(temp.distances[i])
        print()    
    
    def clone(self):
        other = Tree()
        for i in range(len(self.nodes)):
            other.insert(self.nodes[i].value)
        return other
    


        
        
tree = Tree()
tree.insert("University of Pretoria, Pretoria")
tree.insert("CSIR, Meiring Naude Road, Pretoria")
tree.insert("Armscor, Delmas Road, Pretoria")
tree.insert("Denel Dynamics, Nellmapius Drive, Centurion")
tree.insert("Air Force Base Waterkloof, Centurion")
tree.updateDistances()
tree.TSPDistShortest()

"""
BreadFirst Search: (Task 2)
node is the starting point
only works for connected graph // no isolation
"""
def BreadthFirstSearch(node):
    count = 0
    visited = [node]
    unvisited = Queue()
    unvisited.put(node) 
    while not unvisited.empty():
        curr = unvisited.get()
        count += 1
        for child in curr.children:
            if not child in visited:
                visited.append(child)  
                unvisited.put(child)
    for i in range(len(visited)-1):
        print(visited[i].value + "\n|\nV")
    print(visited[len(visited)-1].value)
    print("Number of visited nodes = " + str(count))

"""
DepthFirst Search: (Task 2)
node is the starting point
"""
def DepthFirstSearch(node):
    count = 0
    visited = []
    count = DFS(node, visited)
    for i in range(len(visited)-1):
        print(visited[i].value + "\n|\nV")
    print(visited[len(visited)-1].value)
    print("Number of visited nodes = " + str(count))


def DFS(node, visited = []):
    visited.append(node)
    count = 1
    for i in range(len(node.children)):
        count += 1
        if node.children[i] not in visited:
            count += DFS(node.children[i], visited)
    return count

BreadthFirstSearch(tree.root)
print()
DepthFirstSearch(tree.root)

tree.printChildren("University of Pretoria, Pretoria")
tree.printChildren("CSIR, Meiring Naude Road, Pretoria")
tree.printChildren("Armscor, Delmas Road, Pretoria")
tree.printChildren("Denel Dynamics, Nellmapius Drive, Centurion")
tree.printChildren("Air Force Base Waterkloof, Centurion")

