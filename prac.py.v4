"""
Created on Fri Feb  9 17:39:03 2018

@author: Vishal
Final Code for the Practical including Task 1 and Task 2
"""
import googlemaps
import itertools
from queue import Queue

gmaps = googlemaps.Client(key = 'AIzaSyB8Sjq1wYpnC2mKqyheCNeeTIpZKNVKovI')

class Node(object): #needed for new style class
    #class will only hold a value which will be title and children nodes
    def __init__(self, value):
        self.value = value
        self.children = []
        self.distances = [] # will be parallel to children list
        
    def find(self, value):
        i = 0
        while (i != len(self.children) and self.children[i].value != value):
            i += 1
        return i
    
    def hasChild(self, value):
        if (self.find(value) == len(self.children)):
            return False
        return True
      
    #don't clutter the tree unnecessarily since there is no delete method    
    def addChild(self, child):
        if (self.find(child.value) == len(self.children)): # not found
            self.children.append(child)
class Edge(object):
    def __init__(self, p1, p2, dist):
        self.p1= p1
        self.p2= p2
        
    def isDuplicate(self, other):
        if (other.p1 == self.p1 or other.p2 == self.p1) and (other.p2 == self.p1 or other.p2 == self.p2):
            return True
        return False
    
class Tree(object): #will be structured like a graph
    def __init__(self):
        self.nodes = []
        #self.edges = []
        self.root = None
        self.updateFlag = False
    
    #checks if the given value node already exists in tree
    def isDuplicate(self, value):
        i = 0
        while (i < len(self.nodes) and self.nodes[i].value != value):
            i += 1
        if (i == len(self.nodes)):
            return False
        else:
            return True
    
    def insert(self, value):
        #create a new root(Starting location) if needed
        if (self.root == None):
            self.root = Node(value)
            self.nodes.append(self.root)
            return
        
        # if not root then each node in graph needs a link to newly added node
        # new node also needs a link to each existing node
        # new node then needs to be added to the existing nodes list
        # don't clutter graph with duplicates
        if (not self.isDuplicate(value)):
            temp = Node(value)
            for i in range(len(self.nodes)):
                self.nodes[i].addChild(temp)
                temp.addChild(self.nodes[i])
            self.nodes.append(temp)
            self.updateFlag = True
    
    def updateDistances(self):
        for i in range(0, len(self.nodes)):
            temp = []
            for j in range(0, len(self.nodes)):
                if (i == j):
                    continue
                dist_dict = gmaps.distance_matrix(self.nodes[i].value, self.nodes[j].value)
                temp.insert(self.nodes[i].find(self.nodes[j].value), dist_dict["rows"][0]["elements"][0]["distance"]["value"])
            self.nodes[i].distances = temp
            #overwrite previous distances array
        self.updateFlag = False
    
    def find(self, value):
        i = 0
        while (i != len(self.nodes) and self.nodes[i].value != value):
            i += 1
        if (i == len(self.nodes)):
            return None
        return self.nodes[i]
    
    def printChildren(self, value):
        print(value + '\n')
        temp = self.find(value)
        for i in range (0, len(temp.children)):
            print(temp.children[i].value)
            if (temp.distances):
                print(temp.distances[i])
        print()    
    
    def clone(self):
        other = Tree()
        for i in range(len(self.nodes)):
            other.insert(self.nodes[i].value)
        return other
    
    """
    DepthFirst Search: (Task 2)
    node is the starting point
    requires the tree to be connected as in all nodes should connected with
     a children link somewhere
    """
    def DepthFirstSearch(self, start):
        path = []
        shortSum = 0
        for (i in range(len(self.nodes)-1)):
            shortSum += self.getDist(self.nodes[i], self.nodes[i+1])
        shortSum += self.getDist(self.nodes[len(self.nodes)-1], start)
        shortest = DFS(start, 0, shortSum, path)
    
    def getDist(self, n1, n2):
        if (self.updateFlag = True):
            self.updateDistances()
        return n1.distances[n1.find(n2.value)]
        
    """
    start is the starting node
    sums is a list with sums[0] = currSum and sums[1] = shortSum
    #shortSum = shortest distance recorded so far
    paths is a list with paths[0] = current traversing path and paths[1] = best path recorded so far
    """
    def DFS(self, start, sums = [], paths = [][]):
        if (len(paths[0]) == 0):
            rest = [i for i in start.children]
            #this can be the only possibility
        else:
            rest = [i for i in paths[0][len(paths[0])-1].children if i not in paths[0]]
        if (len(rest) == 0):
            return
            
        if (len(rest) == 1):
            curr = path[len(path)-1]
            currSum += self.getDist(curr, rest[0])
            if (currSum + sums[0] < shortest):
                currSum += self.getDist(rest[0], start)
                if (currSum + sums[0] < shortest):
                    shortest = currSum + sums[0]
        #IDEA: don't actually add value in sums array
        # might be more useful to just use currSum and shortSum or currSum and shortSum as list       
        for i in range(len(rest)):
            #remember to delete path elements in higher levels
            #also check if able to stop early 
    
    def printPath(self, path):
        
        

        
        
tree = Tree()
tree.insert("University of Pretoria, Pretoria")
tree.insert("CSIR, Meiring Naude Road, Pretoria")
tree.insert("Armscor, Delmas Road, Pretoria")
tree.insert("Denel Dynamics, Nellmapius Drive, Centurion")
tree.insert("Air Force Base Waterkloof, Centurion")
tree.updateDistances()

"""
BreadFirst Search: (Task 2)
node is the starting point
only works for connected graph // no isolation
"""
def BreadthFirstSearch(node):
    count = 0
    visited = [node]
    unvisited = Queue()
    unvisited.put(node) 
    while not unvisited.empty():
        curr = unvisited.get()
        count += 1
        for child in curr.children:
            if not child in visited:
                visited.append(child)  
                unvisited.put(child)
    for i in range(len(visited)-1):
        print(visited[i].value + "\n|\nV")
    print(visited[len(visited)-1].value)
    print("Number of visited nodes = " + str(count))





BreadthFirstSearch(tree.root)
print()
DepthFirstSearch(tree.root)


